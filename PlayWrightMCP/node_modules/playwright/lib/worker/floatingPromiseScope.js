"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var floatingPromiseScope_exports = {};
__export(floatingPromiseScope_exports, {
  FloatingPromiseScope: () => FloatingPromiseScope
});
module.exports = __toCommonJS(floatingPromiseScope_exports);
class FloatingPromiseScope {
  constructor() {
    this._floatingCalls = /* @__PURE__ */ new Set();
  }
  /**
   * Enables a promise API call to be tracked by the test, alerting if unawaited.
   *
   * **NOTE:** Returning from an async function wraps the result in a promise, regardless of whether the return value is a promise. This will automatically mark the promise as awaited. Avoid this.
   */
  wrapPromiseAPIResult(promise) {
    if (process.env.PW_DISABLE_FLOATING_PROMISES_WARNING)
      return promise;
    const promiseProxy = new Proxy(promise, {
      get: (target, prop, receiver) => {
        if (prop === "then") {
          return (...args) => {
            this._floatingCalls.delete(promise);
            const originalThen = Reflect.get(target, prop, receiver);
            return originalThen.call(target, ...args);
          };
        } else {
          return Reflect.get(target, prop, receiver);
        }
      }
    });
    this._floatingCalls.add(promise);
    return promiseProxy;
  }
  clear() {
    this._floatingCalls.clear();
  }
  hasFloatingPromises() {
    return this._floatingCalls.size > 0;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FloatingPromiseScope
});
