"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const playwright = __importStar(require("playwright"));
const yaml_1 = __importDefault(require("yaml"));
class Context {
    _options;
    _browser;
    _page;
    _console = [];
    _createPagePromise;
    _fileChooser;
    _lastSnapshotFrames = [];
    constructor(options) {
        this._options = options;
    }
    async createPage() {
        if (this._createPagePromise)
            return this._createPagePromise;
        this._createPagePromise = (async () => {
            const { browser, page } = await this._createPage();
            page.on('console', event => this._console.push(event));
            page.on('framenavigated', frame => {
                if (!frame.parentFrame())
                    this._console.length = 0;
            });
            page.on('close', () => this._onPageClose());
            page.on('filechooser', chooser => this._fileChooser = chooser);
            page.setDefaultNavigationTimeout(60000);
            page.setDefaultTimeout(5000);
            this._page = page;
            this._browser = browser;
            return page;
        })();
        return this._createPagePromise;
    }
    _onPageClose() {
        const browser = this._browser;
        const page = this._page;
        void page?.context()?.close().then(() => browser?.close()).catch(() => { });
        this._createPagePromise = undefined;
        this._browser = undefined;
        this._page = undefined;
        this._fileChooser = undefined;
        this._console.length = 0;
    }
    async install() {
        const channel = this._options.launchOptions?.channel ?? this._options.browserName ?? 'chrome';
        const cli = path_1.default.join(require.resolve('playwright/package.json'), '..', 'cli.js');
        const child = (0, child_process_1.fork)(cli, ['install', channel], {
            stdio: 'pipe',
        });
        const output = [];
        child.stdout?.on('data', data => output.push(data.toString()));
        child.stderr?.on('data', data => output.push(data.toString()));
        return new Promise((resolve, reject) => {
            child.on('close', code => {
                if (code === 0)
                    resolve(channel);
                else
                    reject(new Error(`Failed to install browser: ${output.join('')}`));
            });
        });
    }
    existingPage() {
        if (!this._page)
            throw new Error('Navigate to a location to create a page');
        return this._page;
    }
    async console() {
        return this._console;
    }
    async close() {
        if (!this._page)
            return;
        await this._page.close();
    }
    async submitFileChooser(paths) {
        if (!this._fileChooser)
            throw new Error('No file chooser visible');
        await this._fileChooser.setFiles(paths);
        this._fileChooser = undefined;
    }
    hasFileChooser() {
        return !!this._fileChooser;
    }
    clearFileChooser() {
        this._fileChooser = undefined;
    }
    async _createPage() {
        if (this._options.remoteEndpoint) {
            const url = new URL(this._options.remoteEndpoint);
            if (this._options.browserName)
                url.searchParams.set('browser', this._options.browserName);
            if (this._options.launchOptions)
                url.searchParams.set('launch-options', JSON.stringify(this._options.launchOptions));
            const browser = await playwright[this._options.browserName ?? 'chromium'].connect(String(url));
            const page = await browser.newPage();
            return { browser, page };
        }
        if (this._options.cdpEndpoint) {
            const browser = await playwright.chromium.connectOverCDP(this._options.cdpEndpoint);
            const browserContext = browser.contexts()[0];
            let [page] = browserContext.pages();
            if (!page)
                page = await browserContext.newPage();
            return { browser, page };
        }
        const context = await this._launchPersistentContext();
        const [page] = context.pages();
        return { page };
    }
    async _launchPersistentContext() {
        try {
            const browserType = this._options.browserName ? playwright[this._options.browserName] : playwright.chromium;
            return await browserType.launchPersistentContext(this._options.userDataDir, this._options.launchOptions);
        }
        catch (error) {
            if (error.message.includes('Executable doesn\'t exist'))
                throw new Error(`Browser specified in your config is not installed. Either install it (likely) or change the config.`);
            throw error;
        }
    }
    async allFramesSnapshot() {
        this._lastSnapshotFrames = [];
        const yaml = await this._allFramesSnapshot(this.existingPage());
        return yaml.toString().trim();
    }
    async _allFramesSnapshot(frame) {
        const frameIndex = this._lastSnapshotFrames.push(frame) - 1;
        const snapshotString = await frame.locator('body').ariaSnapshot({ ref: true });
        const snapshot = yaml_1.default.parseDocument(snapshotString);
        const visit = async (node) => {
            if (yaml_1.default.isPair(node)) {
                await Promise.all([
                    visit(node.key).then(k => node.key = k),
                    visit(node.value).then(v => node.value = v)
                ]);
            }
            else if (yaml_1.default.isSeq(node) || yaml_1.default.isMap(node)) {
                node.items = await Promise.all(node.items.map(visit));
            }
            else if (yaml_1.default.isScalar(node)) {
                if (typeof node.value === 'string') {
                    const value = node.value;
                    if (frameIndex > 0)
                        node.value = value.replace('[ref=', `[ref=f${frameIndex}`);
                    if (value.startsWith('iframe ')) {
                        const ref = value.match(/\[ref=(.*)\]/)?.[1];
                        if (ref) {
                            try {
                                const childSnapshot = await this._allFramesSnapshot(frame.frameLocator(`aria-ref=${ref}`));
                                return snapshot.createPair(node.value, childSnapshot);
                            }
                            catch (error) {
                                return snapshot.createPair(node.value, '<could not take iframe snapshot>');
                            }
                        }
                    }
                }
            }
            return node;
        };
        await visit(snapshot.contents);
        return snapshot;
    }
    refLocator(ref) {
        let frame = this._lastSnapshotFrames[0];
        const match = ref.match(/^f(\d+)(.*)/);
        if (match) {
            const frameIndex = parseInt(match[1], 10);
            frame = this._lastSnapshotFrames[frameIndex];
            ref = match[2];
        }
        if (!frame)
            throw new Error(`Frame does not exist. Provide ref from the most current snapshot.`);
        return frame.locator(`aria-ref=${ref}`);
    }
}
exports.Context = Context;
